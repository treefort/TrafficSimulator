// pixel to feet conversion factor based on fixed map scale
const P2F = 3.163053143551256;

// 45 mph in ft/sec 
const SPEEDLIMIT = 66; // ft/sec

// spacing maintained between vehicles
const CAR_SPACING = 3;

// moving the simulation at this speed ensures all traffic moves at 45 mph (66 ft/sec)
const simTimeRatio = 1000 / 20.85851386226856;

// this method parses GET parameters if you want to override values used in the sim
function getGETParameters() {
    let params = {};
    let queryString = window.location.search.substring(1);
    let pairs = queryString.split("&");
    for (let i = 0; i < pairs.length; i++) {
        let pair = pairs[i].split("=");
        let key = decodeURIComponent(pair[0]);
        let value = decodeURIComponent(pair[1]);
        params[key] = value;
    }
    return params;
}

const GET = getGETParameters();

// set primary sim parameters
const MODE = GET.MODE || 'dropoff'; // pickup or dropoff
const BUS_DROPOFF_TIME_MIN = parseInt(GET.BUS_DROPOFF_TIME_MIN || 60, 10);
const BUS_DROPOFF_TIME_MAX = parseInt(GET.BUS_DROPOFF_TIME_MAX || 90, 10);
const CAR_DROPOFF_TIME_MIN = MODE === 'dropoff' ? 7 : 7;
const CAR_DROPOFF_TIME_MAX = MODE === 'dropoff' ? 11 : 11;
const CAR_PATIENCE_MIN = MODE === 'dropoff' ? 5 : 5;
const CAR_PATIENCE_MAX = MODE === 'dropoff' ? 10 : 10;
const BACKGROUND_CARS_PER_HOUR = parseInt(GET.BACKGROUND_CARS_PER_HOUR || 175, 10);
const NUM_CARS = parseInt(GET.NUM_CARS || 323, 10);
const NUM_FACULTY = parseInt(GET.NUM_FACULTY || MODE === 'pickup' ? 0 : 102, 10);
const NUM_BUSSES = parseInt(GET.NUM_BUSSES || 14, 10);

// use a fixed seed for deterministic output
const RNG_SEED = GET.RNG_SEED || new Chance().integer({
    min: 10000000000,
    max: 99999999999,
});
console.log('Seed:', RNG_SEED);

// this method centers the proposed school in the browser viewport
const centerSchoolInView = () => {
    document.documentElement.scrollTop = document.documentElement.scrollHeight / 2 - (document.documentElement.clientHeight / 2);
    document.documentElement.scrollLeft = document.documentElement.scrollWidth / 2- (document.documentElement.clientWidth / 2);
};
setTimeout(centerSchoolInView, 1000);

// toggle the sim between real-time and rapid speed by pressing the 'f' key
let FASTMODE = 1;
let simTiming = !FASTMODE ? simTimeRatio : 1;

// this converts seconds to a fixed number of simulator steps
const secondsToSteps = seconds => Math.round(seconds * 1000 / simTimeRatio);

// enum of goals available to veicles
const GOALS = {
    LOAD: 'load',
    TRAVEL: 'travel',
    WAIT: 'wait',
    PICKUP: 'pickup',
};

// the object that stores all vehicles in the sim
const cars = {};


// interface stuff
const timeElement = document.querySelector('h3.time');
const carsElement = document.querySelector('h3.cars');
const congestionElement = document.querySelector('.congestion');

// all routes (lanes) are defined here
const routes = {
    boylstonEW: [
        {
            "x": 3381.199951171875,
            "y": 1797
        },
        {
            "x": 3265.199951171875,
            "y": 1801
        },
        {
            "x": 3050.199951171875,
            "y": 1810
        },
        {
            "x": 2943.199951171875,
            "y": 1813
        },
        {
            "x": 2892.199951171875,
            "y": 1816
        },
        {
            "x": 2868.199951171875,
            "y": 1816
        },
        {
            "x": 2846.199951171875,
            "y": 1813
        },
        {
            "x": 2836.199951171875,
            "y": 1812
        },
        {
            "x": 2819.199951171875,
            "y": 1807
        },
        {
            "x": 2798.199951171875,
            "y": 1800
        },
        {
            "x": 2783.199951171875,
            "y": 1793
        },
        {
            "x": 2776.199951171875,
            "y": 1790
        },
        {
            "x": 2644.199951171875,
            "y": 1709
        },
        {
            "x": 2569.199951171875,
            "y": 1658
        },
        {
            "x": 2486.199951171875,
            "y": 1583
        },
        {
            "x": 2453.199951171875,
            "y": 1556
        },
        {
            "x": 2438.199951171875,
            "y": 1547
        },
        {
            "x": 2421.199951171875,
            "y": 1539
        },
        {
            "x": 2409.199951171875,
            "y": 1537
        },
        {
            "x": 2397.199951171875,
            "y": 1535
        },
        {
            "x": 2369.199951171875,
            "y": 1534
        },
        {
            "x": 2144.199951171875,
            "y": 1529
        },
        {
            "x": 1986.2000732421875,
            "y": 1520
        },
        {
            "x": 1962.2000732421875,
            "y": 1519
        },
        {
            "x": 1952.2000732421875,
            "y": 1518
        },
        {
            "x": 1935.2000732421875,
            "y": 1514
        },
        {
            "x": 1908.2000732421875,
            "y": 1503
        },
        {
            "x": 1906.2000732421875,
            "y": 1501
        }
    ],
    boylstonWE: [
        {
            "x": 1903.2000732421875,
            "y": 1506
        },
        {
            "x": 1924.2000732421875,
            "y": 1515
        },
        {
            "x": 1948.2000732421875,
            "y": 1521
        },
        {
            "x": 1997.2000732421875,
            "y": 1525
        },
        {
            "x": 2125.2000732421875,
            "y": 1532
        },
        {
            "x": 2339.2000732421875,
            "y": 1538
        },
        {
            "x": 2407.199951171875,
            "y": 1541
        },
        {
            "x": 2419.199951171875,
            "y": 1543
        },
        {
            "x": 2431.199951171875,
            "y": 1547
        },
        {
            "x": 2443.199951171875,
            "y": 1555
        },
        {
            "x": 2489.199951171875,
            "y": 1595
        },
        {
            "x": 2550.199951171875,
            "y": 1649
        },
        {
            "x": 2572.199951171875,
            "y": 1667
        },
        {
            "x": 2610.199951171875,
            "y": 1694
        },
        {
            "x": 2718.199951171875,
            "y": 1762
        },
        {
            "x": 2753.199951171875,
            "y": 1783
        },
        {
            "x": 2782.199951171875,
            "y": 1799
        },
        {
            "x": 2822.199951171875,
            "y": 1813
        },
        {
            "x": 2843.199951171875,
            "y": 1817
        },
        {
            "x": 2875.199951171875,
            "y": 1820
        },
        {
            "x": 2986.199951171875,
            "y": 1817
        },
        {
            "x": 3105.199951171875,
            "y": 1812
        },
        {
            "x": 3198.199951171875,
            "y": 1808
        },
        {
            "x": 3358.199951171875,
            "y": 1802
        },
        {
            "x": 3380.199951171875,
            "y": 1802
        },
        {
            "x": 3381.199951171875,
            "y": 1801
        }
    ],
    medicalParkwayWE: [
    {
        "x": 277,
        "y": 382
    },
    {
        "x": 305,
        "y": 375
    },
    {
        "x": 331,
        "y": 367
    },
    {
        "x": 339,
        "y": 363
    },
    {
        "x": 350,
        "y": 358
    },
    {
        "x": 368,
        "y": 347
    },
    {
        "x": 385,
        "y": 337
    },
    {
        "x": 402,
        "y": 325
    },
    {
        "x": 415,
        "y": 315
    },
    {
        "x": 427,
        "y": 304
    },
    {
        "x": 445,
        "y": 289
    },
    {
        "x": 476,
        "y": 261
    }
    ],
    medicalParkwayEW: [
        {
            "x": 465,
            "y": 248
        },
        {
            "x": 432,
            "y": 278
        },
        {
            "x": 399,
            "y": 306
        },
        {
            "x": 380,
            "y": 320
        },
        {
            "x": 357,
            "y": 335
        },
        {
            "x": 325,
            "y": 351
        },
        {
            "x": 300,
            "y": 359
        },
        {
            "x": 275,
            "y": 365
        }
    ],
    macyGroveNS: [
        {
            "x": 308,
            "y": 48
        },
        {
            "x": 347,
            "y": 101
        },
        {
            "x": 377,
            "y": 137
        },
        {
            "x": 410,
            "y": 177
        },
        {
            "x": 440,
            "y": 212
        },
        {
            "x": 475,
            "y": 252
        },
        {
            "x": 504,
            "y": 281
        },
        {
            "x": 538,
            "y": 315
        },
        {
            "x": 562,
            "y": 335
        },
        {
            "x": 586,
            "y": 349
        },
        {
            "x": 622,
            "y": 364
        },
        {
            "x": 656,
            "y": 373
        },
        {
            "x": 773,
            "y": 407
        },
        {
            "x": 859,
            "y": 432
        },
        {
            "x": 901,
            "y": 446
        },
        {
            "x": 925,
            "y": 456
        },
        {
            "x": 943,
            "y": 466
        },
        {
            "x": 958,
            "y": 474
        },
        {
            "x": 1006,
            "y": 508
        },
        {
            "x": 1045,
            "y": 538
        },
        {
            "x": 1091,
            "y": 575
        },
        {
            "x": 1124,
            "y": 601
        },
        {
            "x": 1174,
            "y": 642
        },
        {
            "x": 1255,
            "y": 706
        },
        {
            "x": 1281,
            "y": 728
        },
        {
            "x": 1293,
            "y": 739
        },
        {
            "x": 1307,
            "y": 755
        },
        {
            "x": 1319,
            "y": 775
        },
        {
            "x": 1330,
            "y": 797
        },
        {
            "x": 1337,
            "y": 819
        },
        {
            "x": 1342,
            "y": 844
        },
        {
            "x": 1344,
            "y": 860
        },
        {
            "x": 1344,
            "y": 883
        },
        {
            "x": 1341,
            "y": 981
        },
        {
            "x": 1336,
            "y": 1118
        },
        {
            "x": 1336,
            "y": 1120
        }
    ],
    macyGroveSN: [
        {
            "x": 1341,
            "y": 1116
        },
        {
            "x": 1345,
            "y": 1004
        },
        {
            "x": 1347,
            "y": 958
        },
        {
            "x": 1350,
            "y": 878
        },
        {
            "x": 1349,
            "y": 853
        },
        {
            "x": 1344,
            "y": 820
        },
        {
            "x": 1339,
            "y": 800
        },
        {
            "x": 1326,
            "y": 775
        },
        {
            "x": 1311,
            "y": 751
        },
        {
            "x": 1293,
            "y": 731
        },
        {
            "x": 1260,
            "y": 703
        },
        {
            "x": 1194,
            "y": 651
        },
        {
            "x": 1119,
            "y": 589
        },
        {
            "x": 1064,
            "y": 545
        },
        {
            "x": 1003,
            "y": 499
        },
        {
            "x": 978,
            "y": 482
        },
        {
            "x": 947,
            "y": 462
        },
        {
            "x": 921,
            "y": 449
        },
        {
            "x": 896,
            "y": 439
        },
        {
            "x": 867,
            "y": 429
        },
        {
            "x": 836,
            "y": 420
        },
        {
            "x": 753,
            "y": 397
        },
        {
            "x": 677,
            "y": 375
        },
        {
            "x": 632,
            "y": 361
        },
        {
            "x": 597,
            "y": 344
        },
        {
            "x": 564,
            "y": 323
        },
        {
            "x": 488,
            "y": 252
        },
        {
            "x": 446,
            "y": 205
        },
        {
            "x": 346,
            "y": 88
        },
        {
            "x": 324,
            "y": 61
        },
        {
            "x": 286,
            "y": 9
        }
    ],
    adkinsSN: [
        {
            "x": 3489,
            "y": 2519
        },
        {
            "x": 3467,
            "y": 2353
        },
        {
            "x": 3451,
            "y": 2239
        },
        {
            "x": 3436,
            "y": 2137
        },
        {
            "x": 3417,
            "y": 2007
        },
        {
            "x": 3395,
            "y": 1852
        },
        {
            "x": 3388,
            "y": 1801
        },
        {
            "x": 3386,
            "y": 1702
        },
        {
            "x": 3388,
            "y": 1612
        },
        {
            "x": 3390,
            "y": 1531
        },
        {
            "x": 3394,
            "y": 1393
        },
        {
            "x": 3396,
            "y": 1354
        },
        {
            "x": 3400,
            "y": 1323
        },
        {
            "x": 3404,
            "y": 1307
        },
        {
            "x": 3409,
            "y": 1292
        },
        {
            "x": 3415,
            "y": 1277
        },
        {
            "x": 3428,
            "y": 1254
        },
        {
            "x": 3444,
            "y": 1231
        },
        {
            "x": 3464,
            "y": 1208
        },
        {
            "x": 3496,
            "y": 1184
        },
        {
            "x": 3530,
            "y": 1165
        },
        {
            "x": 3560,
            "y": 1156
        },
        {
            "x": 3591,
            "y": 1149
        },
        {
            "x": 3617,
            "y": 1147
        },
        {
            "x": 3626,
            "y": 1147
        }
    ],
    adkinsNS: [
        {
            "x": 3627,
            "y": 1142
        },
        {
            "x": 3598,
            "y": 1143
        },
        {
            "x": 3558,
            "y": 1150
        },
        {
            "x": 3540,
            "y": 1156
        },
        {
            "x": 3515,
            "y": 1167
        },
        {
            "x": 3493,
            "y": 1180
        },
        {
            "x": 3470,
            "y": 1196
        },
        {
            "x": 3452,
            "y": 1214
        },
        {
            "x": 3435,
            "y": 1233
        },
        {
            "x": 3424,
            "y": 1251
        },
        {
            "x": 3413,
            "y": 1270
        },
        {
            "x": 3402,
            "y": 1297
        },
        {
            "x": 3395,
            "y": 1320
        },
        {
            "x": 3391,
            "y": 1338
        },
        {
            "x": 3389,
            "y": 1378
        },
        {
            "x": 3387,
            "y": 1440
        },
        {
            "x": 3384,
            "y": 1553
        },
        {
            "x": 3380,
            "y": 1686
        },
        {
            "x": 3380,
            "y": 1735
        },
        {
            "x": 3383,
            "y": 1800
        },
        {
            "x": 3388,
            "y": 1837
        },
        {
            "x": 3406,
            "y": 1960
        },
        {
            "x": 3421,
            "y": 2061
        },
        {
            "x": 3430,
            "y": 2125
        },
        {
            "x": 3451,
            "y": 2271
        },
        {
            "x": 3469,
            "y": 2397
        },
        {
            "x": 3485,
            "y": 2519
        }
    ],
    bunkerHillWE: [
        {
            "x": 993,
            "y": 2519
        },
        {
            "x": 993,
            "y": 2459
        },
        {
            "x": 991,
            "y": 2439
        },
        {
            "x": 985,
            "y": 2402
        },
        {
            "x": 979,
            "y": 2376
        },
        {
            "x": 968,
            "y": 2332
        },
        {
            "x": 962,
            "y": 2305
        },
        {
            "x": 960,
            "y": 2286
        },
        {
            "x": 959,
            "y": 2249
        },
        {
            "x": 962,
            "y": 2174
        },
        {
            "x": 965,
            "y": 2130
        },
        {
            "x": 964,
            "y": 2099
        },
        {
            "x": 961,
            "y": 2067
        },
        {
            "x": 955,
            "y": 2033
        },
        {
            "x": 935,
            "y": 1957
        },
        {
            "x": 918,
            "y": 1881
        },
        {
            "x": 913,
            "y": 1855
        },
        {
            "x": 912,
            "y": 1824
        },
        {
            "x": 915,
            "y": 1798
        },
        {
            "x": 928,
            "y": 1730
        },
        {
            "x": 939,
            "y": 1691
        },
        {
            "x": 951,
            "y": 1662
        },
        {
            "x": 974,
            "y": 1613
        },
        {
            "x": 1031,
            "y": 1507
        },
        {
            "x": 1057,
            "y": 1466
        },
        {
            "x": 1101,
            "y": 1398
        },
        {
            "x": 1155,
            "y": 1319
        },
        {
            "x": 1229,
            "y": 1225
        },
        {
            "x": 1260,
            "y": 1187
        },
        {
            "x": 1310,
            "y": 1144
        },
        {
            "x": 1324,
            "y": 1135
        },
        {
            "x": 1343,
            "y": 1124
        },
        {
            "x": 1376,
            "y": 1108
        },
        {
            "x": 1432,
            "y": 1082
        },
        {
            "x": 1495,
            "y": 1058
        },
        {
            "x": 1524,
            "y": 1050
        },
        {
            "x": 1554,
            "y": 1045
        },
        {
            "x": 1593,
            "y": 1044
        },
        {
            "x": 1662,
            "y": 1048
        },
        {
            "x": 1718,
            "y": 1052
        },
        {
            "x": 1774,
            "y": 1057
        },
        {
            "x": 1803,
            "y": 1059
        },
        {
            "x": 1848,
            "y": 1057
        },
        {
            "x": 1855,
            "y": 1056
        },
        {
            "x": 1886,
            "y": 1050
        },
        {
            "x": 1908,
            "y": 1042
        },
        {
            "x": 1925,
            "y": 1036
        },
        {
            "x": 1943,
            "y": 1027
        },
        {
            "x": 1959,
            "y": 1017
        },
        {
            "x": 1974,
            "y": 1006
        },
        {
            "x": 1990,
            "y": 993
        },
        {
            "x": 2000,
            "y": 982
        },
        {
            "x": 2013,
            "y": 965
        },
        {
            "x": 2023,
            "y": 950
        },
        {
            "x": 2039,
            "y": 919
        },
        {
            "x": 2053,
            "y": 888
        },
        {
            "x": 2071,
            "y": 851
        },
        {
            "x": 2088,
            "y": 818
        },
        {
            "x": 2100,
            "y": 799
        },
        {
            "x": 2114,
            "y": 781
        },
        {
            "x": 2127,
            "y": 767
        },
        {
            "x": 2146,
            "y": 746
        },
        {
            "x": 2182,
            "y": 712
        },
        {
            "x": 2237,
            "y": 663
        },
        {
            "x": 2289,
            "y": 614
        },
        {
            "x": 2338,
            "y": 570
        },
        {
            "x": 2353,
            "y": 557
        },
        {
            "x": 2365,
            "y": 544
        },
        {
            "x": 2380,
            "y": 525
        },
        {
            "x": 2396,
            "y": 501
        },
        {
            "x": 2409,
            "y": 476
        },
        {
            "x": 2418,
            "y": 454
        },
        {
            "x": 2434,
            "y": 404
        },
        {
            "x": 2460,
            "y": 325
        },
        {
            "x": 2468,
            "y": 298
        },
        {
            "x": 2477,
            "y": 273
        },
        {
            "x": 2489,
            "y": 245
        },
        {
            "x": 2499,
            "y": 224
        },
        {
            "x": 2522,
            "y": 182
        },
        {
            "x": 2553,
            "y": 124
        },
        {
            "x": 2579,
            "y": 77
        },
        {
            "x": 2621,
            "y": 0
        }
    ],
    bunkerHillEW: [
        {
            "x": 2617,
            "y": 0
        },
        {
            "x": 2554,
            "y": 115
        },
        {
            "x": 2541,
            "y": 138
        },
        {
            "x": 2528,
            "y": 163
        },
        {
            "x": 2502,
            "y": 210
        },
        {
            "x": 2489,
            "y": 236
        },
        {
            "x": 2480,
            "y": 255
        },
        {
            "x": 2473,
            "y": 273
        },
        {
            "x": 2466,
            "y": 293
        },
        {
            "x": 2454,
            "y": 330
        },
        {
            "x": 2431,
            "y": 403
        },
        {
            "x": 2420,
            "y": 434
        },
        {
            "x": 2416,
            "y": 446
        },
        {
            "x": 2410,
            "y": 463
        },
        {
            "x": 2402,
            "y": 481
        },
        {
            "x": 2394,
            "y": 498
        },
        {
            "x": 2381,
            "y": 516
        },
        {
            "x": 2363,
            "y": 541
        },
        {
            "x": 2348,
            "y": 556
        },
        {
            "x": 2256,
            "y": 639
        },
        {
            "x": 2242,
            "y": 653
        },
        {
            "x": 2178,
            "y": 710
        },
        {
            "x": 2143,
            "y": 742
        },
        {
            "x": 2116,
            "y": 773
        },
        {
            "x": 2103,
            "y": 790
        },
        {
            "x": 2093,
            "y": 803
        },
        {
            "x": 2082,
            "y": 821
        },
        {
            "x": 2052,
            "y": 883
        },
        {
            "x": 2040,
            "y": 909
        },
        {
            "x": 2029,
            "y": 931
        },
        {
            "x": 2021,
            "y": 945
        },
        {
            "x": 2011,
            "y": 961
        },
        {
            "x": 1995,
            "y": 983
        },
        {
            "x": 1988,
            "y": 990
        },
        {
            "x": 1970,
            "y": 1004
        },
        {
            "x": 1941,
            "y": 1021
        },
        {
            "x": 1915,
            "y": 1033
        },
        {
            "x": 1904,
            "y": 1037
        },
        {
            "x": 1891,
            "y": 1042
        },
        {
            "x": 1868,
            "y": 1048
        },
        {
            "x": 1847,
            "y": 1051
        },
        {
            "x": 1824,
            "y": 1052
        },
        {
            "x": 1801,
            "y": 1051
        },
        {
            "x": 1747,
            "y": 1050
        },
        {
            "x": 1668,
            "y": 1045
        },
        {
            "x": 1609,
            "y": 1041
        },
        {
            "x": 1597,
            "y": 1040
        },
        {
            "x": 1574,
            "y": 1040
        },
        {
            "x": 1561,
            "y": 1041
        },
        {
            "x": 1546,
            "y": 1042
        },
        {
            "x": 1530,
            "y": 1045
        },
        {
            "x": 1519,
            "y": 1047
        },
        {
            "x": 1495,
            "y": 1053
        },
        {
            "x": 1471,
            "y": 1062
        },
        {
            "x": 1435,
            "y": 1077
        },
        {
            "x": 1388,
            "y": 1098
        },
        {
            "x": 1333,
            "y": 1124
        },
        {
            "x": 1305,
            "y": 1141
        },
        {
            "x": 1270,
            "y": 1172
        },
        {
            "x": 1258,
            "y": 1184
        },
        {
            "x": 1227,
            "y": 1220
        },
        {
            "x": 1180,
            "y": 1280
        },
        {
            "x": 1112,
            "y": 1373
        },
        {
            "x": 1082,
            "y": 1421
        },
        {
            "x": 1047,
            "y": 1474
        },
        {
            "x": 1030,
            "y": 1500
        },
        {
            "x": 1006,
            "y": 1544
        },
        {
            "x": 982,
            "y": 1589
        },
        {
            "x": 951,
            "y": 1652
        },
        {
            "x": 942,
            "y": 1672
        },
        {
            "x": 935,
            "y": 1689
        },
        {
            "x": 931,
            "y": 1703
        },
        {
            "x": 924,
            "y": 1731
        },
        {
            "x": 919,
            "y": 1754
        },
        {
            "x": 911,
            "y": 1800
        },
        {
            "x": 909,
            "y": 1813
        },
        {
            "x": 908,
            "y": 1823
        },
        {
            "x": 908,
            "y": 1832
        },
        {
            "x": 909,
            "y": 1856
        },
        {
            "x": 911,
            "y": 1870
        },
        {
            "x": 921,
            "y": 1916
        },
        {
            "x": 933,
            "y": 1965
        },
        {
            "x": 949,
            "y": 2025
        },
        {
            "x": 951,
            "y": 2035
        },
        {
            "x": 955,
            "y": 2050
        },
        {
            "x": 957,
            "y": 2065
        },
        {
            "x": 959,
            "y": 2088
        },
        {
            "x": 960,
            "y": 2115
        },
        {
            "x": 960,
            "y": 2133
        },
        {
            "x": 957,
            "y": 2189
        },
        {
            "x": 956,
            "y": 2234
        },
        {
            "x": 955,
            "y": 2259
        },
        {
            "x": 955,
            "y": 2280
        },
        {
            "x": 958,
            "y": 2302
        },
        {
            "x": 965,
            "y": 2335
        },
        {
            "x": 979,
            "y": 2395
        },
        {
            "x": 984,
            "y": 2418
        },
        {
            "x": 988,
            "y": 2442
        },
        {
            "x": 990,
            "y": 2468
        },
        {
            "x": 989,
            "y": 2519
        }
    ],
    busDrop: [
        {   "x": 1905,
            "y": 1501
        },
        {
            "x": 1860,
            "y": 1486.25
        },
        {
            "x": 1823,
            "y": 1475.25
        },
        {
            "x": 1808,
            "y": 1471.25
        },
        {
            "x": 1789,
            "y": 1470.25
        },
        {
            "x": 1777,
            "y": 1470.25
        },
        {
            "x": 1767,
            "y": 1471.25
        },
        {
            "x": 1759,
            "y": 1469.25
        },
        {
            "x": 1749,
            "y": 1464.25
        },
        {
            "x": 1745,
            "y": 1458.25
        },
        {
            "x": 1742,
            "y": 1453.25
        },
        {
            "x": 1740,
            "y": 1419.25
        },
        {
            "x": 1736,
            "y": 1386.25
        },
        {
            "x": 1738,
            "y": 1382.25
        },
        {
            "x": 1740,
            "y": 1378.25
        },
        {
            "x": 1744,
            "y": 1374.25
        },
        {
            "x": 1745,
            "y": 1370.25
        },
        {
            "x": 1746,
            "y": 1365.25
        },
        {
            "x": 1744,
            "y": 1361.25
        },
        {
            "x": 1742,
            "y": 1357.25
        },
        {
            "x": 1739,
            "y": 1354.25
        },
        {
            "x": 1733,
            "y": 1354.25
        },
        {
            "x": 1729,
            "y": 1353.25
        },
        {
            "x": 1725,
            "y": 1355.25
        },
        {
            "x": 1721,
            "y": 1357.25
        },
        {
            "x": 1719,
            "y": 1361.25
        },
        {
            "x": 1719,
            "y": 1366.25
        },
        {
            "x": 1719,
            "y": 1370.25
        },
        {
            "x": 1722,
            "y": 1374.25
        },
        {
            "x": 1728,
            "y": 1379.25
        },
        {
            "x": 1730,
            "y": 1385.25
        },
        {
            "x": 1732,
            "y": 1388.25
        },
        {
            "x": 1733,
            "y": 1395.25
        },
        {
            "x": 1733,
            "y": 1407.25
        },
        {
            "x": 1738,
            "y": 1453.25
        },
        {
            "x": 1741,
            "y": 1462.25
        },
        {
            "x": 1745,
            "y": 1467.25
        },
        {
            "x": 1750,
            "y": 1470.25
        },
        {
            "x": 1756,
            "y": 1473.25
        },
        {
            "x": 1763,
            "y": 1475.25
        },
        {
            "x": 1775,
            "y": 1475.25
        },
        {
            "x": 1791,
            "y": 1474.25
        },
        {
            "x": 1805,
            "y": 1475.25
        },
        {
            "x": 1811,
            "y": 1475.25
        },
        {
            "x": 1891,
            "y": 1501.25
        },
        {
            "x": 1895,
            "y": 1503.25
        },
        {
            "x": 1901,
            "y": 1505.25
        }
    ],
    carLine1: [
        {
            "x": 1748.2000732421875,
            "y": 1057
        },
        {
            "x": 1748.2000732421875,
            "y": 1064
        },
        {
            "x": 1748.2000732421875,
            "y": 1068
        },
        {
            "x": 1748.2000732421875,
            "y": 1072
        },
        {
            "x": 1746.2000732421875,
            "y": 1076
        },
        {
            "x": 1742.2000732421875,
            "y": 1079
        },
        {
            "x": 1735.2000732421875,
            "y": 1081
        },
        {
            "x": 1724.2000732421875,
            "y": 1082
        },
        {
            "x": 1705.2000732421875,
            "y": 1082
        },
        {
            "x": 1675.2000732421875,
            "y": 1084
        },
        {
            "x": 1667.2000732421875,
            "y": 1086
        },
        {
            "x": 1659.2000732421875,
            "y": 1090
        },
        {
            "x": 1653.2000732421875,
            "y": 1098
        },
        {
            "x": 1649.2000732421875,
            "y": 1105
        },
        {
            "x": 1648.2000732421875,
            "y": 1110
        },
        {
            "x": 1648.2000732421875,
            "y": 1116
        },
        {
            "x": 1649.2000732421875,
            "y": 1123
        },
        {
            "x": 1650.2000732421875,
            "y": 1127
        },
        {
            "x": 1653.2000732421875,
            "y": 1131
        },
        {
            "x": 1657.2000732421875,
            "y": 1137
        },
        {
            "x": 1663.2000732421875,
            "y": 1141
        },
        {
            "x": 1671.2000732421875,
            "y": 1143
        },
        {
            "x": 1707.2000732421875,
            "y": 1151
        },
        {
            "x": 1712.2000732421875,
            "y": 1154
        },
        {
            "x": 1716.2000732421875,
            "y": 1160
        },
        {
            "x": 1717.2000732421875,
            "y": 1165
        },
        {
            "x": 1718.2000732421875,
            "y": 1172
        },
        {
            "x": 1719.2000732421875,
            "y": 1199
        },
        {
            "x": 1721.2000732421875,
            "y": 1243
        },
        {
            "x": 1723.2000732421875,
            "y": 1286
        },
        {
            "x": 1723.2000732421875,
            "y": 1298
        },
        {
            "x": 1724.2000732421875,
            "y": 1305
        },
        {
            "x": 1726.2000732421875,
            "y": 1311
        },
        {
            "x": 1731.2000732421875,
            "y": 1317
        },
        {
            "x": 1737.2000732421875,
            "y": 1320
        },
        {
            "x": 1745.2000732421875,
            "y": 1321
        },
        {
            "x": 1778.2000732421875,
            "y": 1317
        },
        { 
            "x": 1810,
            "y": 1314
        },
    ],
    carLine2: [
        {
            "x": 1753,
            "y": 1058
        },
        {
            "x": 1752,
            "y": 1065
        },
        {
            "x": 1751,
            "y": 1072
        },
        {
            "x": 1749,
            "y": 1076
        },
        {
            "x": 1747,
            "y": 1079
        },
        {
            "x": 1742,
            "y": 1082
        },
        {
            "x": 1738,
            "y": 1084
        },
        {
            "x": 1724,
            "y": 1085
        },
        {
            "x": 1677,
            "y": 1088
        },
        {
            "x": 1669,
            "y": 1090
        },
        {
            "x": 1665,
            "y": 1091
        },
        {
            "x": 1661,
            "y": 1094
        },
        {
            "x": 1656,
            "y": 1100
        },
        {
            "x": 1653,
            "y": 1106
        },
        {
            "x": 1652,
            "y": 1112
        },
        {
            "x": 1651,
            "y": 1117
        },
        {
            "x": 1653,
            "y": 1124
        },
        {
            "x": 1655,
            "y": 1127
        },
        {
            "x": 1658,
            "y": 1132
        },
        {
            "x": 1664,
            "y": 1136
        },
        {
            "x": 1673,
            "y": 1140
        },
        {
            "x": 1686,
            "y": 1143
        },
        {
            "x": 1709,
            "y": 1148
        },
        {
            "x": 1713,
            "y": 1151
        },
        {
            "x": 1720,
            "y": 1159
        },
        {
            "x": 1721,
            "y": 1163
        },
        {
            "x": 1722,
            "y": 1170
        },
        {
            "x": 1722,
            "y": 1183
        },
        {
            "x": 1723,
            "y": 1202
        },
        {
            "x": 1724,
            "y": 1233
        },
        {
            "x": 1726,
            "y": 1259
        },
        {
            "x": 1726,
            "y": 1271
        },
        {
            "x": 1727,
            "y": 1281
        },
        {
            "x": 1728,
            "y": 1306
        },
        {
            "x": 1729,
            "y": 1310
        },
        {
            "x": 1732,
            "y": 1313
        },
        {
            "x": 1735,
            "y": 1316
        },
        {
            "x": 1740,
            "y": 1317
        },
        {
            "x": 1749,
            "y": 1317
        },
        {
            "x": 1777,
            "y": 1314
        },
        {   
            "x": 1808,
            "y": 1310
        }
        // {
        //     "x": 1858,
        //     "y": 1303
        // },
        // {
        //     "x": 1859,
        //     "y": 1300
        // },
        // {
        //     "x": 1859,
        //     "y": 1295
        // },
        // {
        //     "x": 1857,
        //     "y": 1275
        // },
        // {
        //     "x": 1858,
        //     "y": 1272
        // },
        // {
        //     "x": 1862,
        //     "y": 1270
        // },
        // {
        //     "x": 1869,
        //     "y": 1270
        // },
        // {
        //     "x": 1881,
        //     "y": 1268
        // },
        // {
        //     "x": 1887,
        //     "y": 1267
        // },
        // {
        //     "x": 1890,
        //     "y": 1266
        // },
        // {
        //     "x": 1890,
        //     "y": 1266
        // }
    ],
    boylstonUpSN: [
        {
            "x": 1904,
            "y": 1499.25
        },
        {
            "x": 1911,
            "y": 1470.25
        },
        {
            "x": 1916,
            "y": 1444.25
        },
        {
            "x": 1917,
            "y": 1429.25
        },
        {
            "x": 1914,
            "y": 1399.25
        },
        {
            "x": 1902,
            "y": 1304.25
        },
        {
            "x": 1889,
            "y": 1184.25
        },
        {
            "x": 1879,
            "y": 1102.25
        },
        {
            "x": 1871,
            "y": 1058.25
        }
    ],
    boylstonUpNS: [
        {
            "x": 1866.2000732421875,
            "y": 1059
        },
        {
            "x": 1870.2000732421875,
            "y": 1076
        },
        {
            "x": 1876.2000732421875,
            "y": 1121
        },
        {
            "x": 1884.2000732421875,
            "y": 1194
        },
        {
            "x": 1890.2000732421875,
            "y": 1246
        },
        {
            "x": 1893.2000732421875,
            "y": 1267
        },
        {
            "x": 1905.2000732421875,
            "y": 1379
        },
        {
            "x": 1909.2000732421875,
            "y": 1412
        },
        {
            "x": 1911.2000732421875,
            "y": 1429
        },
        {
            "x": 1910.2000732421875,
            "y": 1444
        },
        {
            "x": 1907.2000732421875,
            "y": 1461
        },
        {
            "x": 1904.2000732421875,
            "y": 1478
        },
        {
            "x": 1899.2000732421875,
            "y": 1495
        },
        {
            "x": 1898.2000732421875,
            "y": 1498
        }
    ],
    boylstonToMacyGrove: [
        {
            "x": 1881.2000732421875,
            "y": 1112
        },
        {
            "x": 1882.2000732421875,
            "y": 1104
        },
        {
            "x": 1878.2000732421875,
            "y": 1080
        },
        {
            "x": 1876.2000732421875,
            "y": 1066
        },
        {
            "x": 1875.2000732421875,
            "y": 1057
        },
        {
            "x": 1876.2000732421875,
            "y": 1057
        }
    ],
    bunkerHillWEParentDropoff: [
        {
            "x": 1718.2000732421875,
            "y": 1053
        },
        {
            "x": 1723.2000732421875,
            "y": 1056
        },
        {
            "x": 1744.2000732421875,
            "y": 1057
        },
        {
            "x": 1753.2000732421875,
            "y": 1058
        }
    ],
    bunkerHillEWParentDropoff: [
        {
            "x": 1816,
            "y": 1054
        },
        {
            "x": 1800,
            "y": 1055
        },
        {
            "x": 1787,
            "y": 1055
        },
        {
            "x": 1771,
            "y": 1054
        },
        {
            "x": 1754,
            "y": 1054
        }
    ],
    carDropOffBoylstonDown: [
        {
            "x": 1858.4000244140625,
            "y": 1274
        },
        {
            "x": 1862.4000244140625,
            "y": 1272
        },
        {
            "x": 1868.4000244140625,
            "y": 1271
        },
        {
            "x": 1885.4000244140625,
            "y": 1269
        },
        {
            "x": 1887.4000244140625,
            "y": 1268
        },
        {
            "x": 1889.4000244140625,
            "y": 1269
        }
    ],
    carDropOffBoylstonUp: [
        {
            "x": 1860,
            "y": 1278
        },
        {
            "x": 1863,
            "y": 1275
        },
        {
            "x": 1870,
            "y": 1273
        },
        {
            "x": 1887,
            "y": 1272
        },
        {
            "x": 1890,
            "y": 1272
        }
    ],
    carDropOffJoiner: [
        {
            "x": 1809,
            "y": 1312
        },
        {
            "x": 1845,
            "y": 1308
        },
        {
            "x": 1856,
            "y": 1307
        },
        {
            "x": 1859,
            "y": 1305
        },
        {
            "x": 1860,
            "y": 1301
        },
        {
            "x": 1859,
            "y": 1294
        },
        {
            "x": 1858,
            "y": 1289
        },
        {
            "x": 1858,
            "y": 1283
        },
        {
            "x": 1858,
            "y": 1277
        }
    ],
    facultyParking: [
        {
            "x": 1727,
            "y": 1284
        },
        {
            "x": 1730,
            "y": 1286
        },
        {
            "x": 1735,
            "y": 1286
        },
        {
            "x": 1739,
            "y": 1287
        },
        {
            "x": 1740,
            "y": 1293
        },
        {
            "x": 1740,
            "y": 1296
        },
        {
            "x": 1740,
            "y": 1300
        },
        {
            "x": 1741,
            "y": 1302
        },
        {
            "x": 1744,
            "y": 1304
        },
        {
            "x": 1748,
            "y": 1305
        },
        {
            "x": 1753,
            "y": 1305
        },
        {
            "x": 1759,
            "y": 1304
        },
        {
            "x": 1775,
            "y": 1302
        },
        {
            "x": 1801,
            "y": 1300
        }
    ],
};

// actions dictate what a single vehicle will attempt to do throughout every step of its lifecycle
// this method converts the vehicle's goals (eg. travel from point A to B, wait, enter the car line, etc)
// into an array of actions.
const goalsToActions = (goals, type = 'student') => {
    const actions = [];
    goals.forEach(goal => {
        switch (goal[0]) {
            case GOALS.TRAVEL:
                for (let i = goal[2]; i <= goal[3]; i += 1) {
                    actions.push([ 'move', goal[1], i]);
                }
                break;
            case GOALS.WAIT:
                for (let i = 0; i <= goal[1]; i += 1) {
                    actions.push([ ...goal ]);
                }
                break;
            case GOALS.CAR_LINE:
                actions.push([ 'car_line', goal[1], type ]);
                break;
        }
    });
    return actions;
};

// the Car class
class Car {
    constructor(attributes) {
        for (let key in attributes) {
            this[key] = attributes[key];
        }

        this.id = uuid.v4(); // assign the car a unique ID
        this.actions = this.processGoals(); // generate the array of actions for this vehicle
        this.actionCursor = 0; // what action are we currently trying to accomplish?
        this.segments = []; // how many segments does this car occupy on the road (the car's length)
        this.active = false; // is this car active yet
        this.stepsSitting = 0; // how long has this car been trying to accomplish the current action?
        this.patience = carRNG.integer({  // this defines how long a car will try to accomplish the current
            min: secondsToSteps(CAR_PATIENCE_MIN), // action before attempting to take an alternate route
            max: secondsToSteps(CAR_PATIENCE_MAX),
        });
    }
    processGoals() {
        const actions = goalsToActions(this.goals, this.type);
        return actions;
    }
    /// this method checks to see if its current action is doable
    canIDoThis(action) {
        switch (action[0]) {
            case 'move':
                const headPosition = this.segments.length ? this.segments[this.segments.length - 1] : null; // the "front" of the car
                let extraSpace = 0;
                if (headPosition && headPosition[0] !== action[1]) {
                    // we're changing streets, make sure there's enough room to completely merge
                    extraSpace = this.length;
                }
                const headsup = routeStacks[action[1]].slice(action[2], action[2] + CAR_SPACING + extraSpace); // an array of spaces ahead of where the car wants to go
                let iCanMove = false;
                const someoneHasDibs = routeDibs[action[1]][action[2]] && routeDibs[action[1]][action[2]] !== this.id; // check and see if another vehicle is waiting for this space
                if (headPosition) {
                    iCanMove = !someoneHasDibs && headsup && typeof headsup.find(val => val && val !== this.id) === 'undefined';
                } else {
                    // inserting into the map, just check if cell is occupied
                    iCanMove = !someoneHasDibs && headsup && typeof headsup.find(val => val && val !== this.id) === 'undefined';
                }

                if (iCanMove && extraSpace) {
                    // if we move and change roads, tally the new number of cars on each road
                    tallyCongestion();
                }

                this.stepsSitting = iCanMove ? 0 : this.stepsSitting += 1;
                return iCanMove;
            case 'wait': 
                // if we're in the drop-off queue unloading area, turn blue
                if (action[1] === 'carline') this.color = 'blue';
                // wait until dropoff opens at 7am 
                if (MODE === 'dropoff' && action[1] === 'carline' && simStep < secondsToSteps(60 * 60)) return false;
                // wait until 2:10 for school to release
                if (MODE === 'pickup' && action[1] === 'carline' && simStep < secondsToSteps(60 * 40)) return false;
                if (MODE === 'pickup' && action[2] === 'bus' && simStep < secondsToSteps(60 * 40)) return false;
                return true;
                break;
            default:
                return true;
        }
    }

    // this is the step function for an individual car
    step(stepIndex) {
        if (stepIndex === this.activationStep) {
            // a car's activationStep is the sim step when the car starts working through its list of actions
            this.startStep = stepIndex;
            this.active = true;
            // update car tallies
            setCarsTally();
            tallyCongestion();
        }

        if (this.active && this.actionCursor < this.actions.length) {
            // we still have actions left to perform, fetch the current one
            const currentAction = this.actions[this.actionCursor];
            // check if we can perform the action
            if (this.canIDoThis(currentAction)) {
                // we can!
                switch (currentAction[0]) {
                    case 'move':
                        if (!routeStacks[currentAction[1]][currentAction[2]]) {
                            // clear existing spots and redraw car
                            routeStacks[currentAction[1]][currentAction[2]] = this.id;
                            routeDibs[currentAction[1]][currentAction[2]] = null;

                            // update car segments array
                            this.segments.push([currentAction[1], currentAction[2]]);
                            if (this.segments.length >= this.length) {
                                let oldSeg = this.segments.shift();
                                routeStacks[oldSeg[0]][oldSeg[1]] = null;
                            }
                        }
                        // advance to the next action
                        this.actionCursor += 1;
                        break;
                    case 'wait':
                        // do nothing, and advance to the next action
                        this.actionCursor += 1;
                        break;
                    case 'car_line':
                        // we've hit a 'car_line' action, augment the car's actions list with
                        // the appropriate items to navigate through the car line
                        if (currentAction[2] === 'faculty') {
                            // car is faculty
                            let carLineActions = [];
                            for (let i = 0; i < 347; i += 1) {
                                carLineActions.push([ 'move', `carLine2`, i ]);
                            }
                            // go to faculty parking
                            for (let i = 0; i < routeStacks.facultyParking.length ; i += 1) {
                                carLineActions.push([ 'move', `facultyParking`, i ]);
                            }
                            this.actions.splice(this.actionCursor, 9000, ...carLineActions);
                        } else {
                            // car is a parent, so pick the car line lane with the fewest cars
                            const bestLane = (routeTallies.carLine1 || 0) > (routeTallies.carLine2 || 0) ? 2 : 1;
                            this.actions.splice(this.actionCursor, 1, ...getCarLineActions(bestLane, currentAction[1]));
                        }
                        this.actionCursor += 1;
                        break;
                    default:
                }
            } else {
                // we can't perform the action
                switch (currentAction[0]) {
                    case 'move':
                        if (this.stepsSitting > 500 && this.stepsSitting < 1500 && !routeDibs[currentAction[1]][currentAction[2]]) {
                            // we've been waiting for ~10 seconds, so call dibs on the spot we're driving to
                            // so that cars will "let you in"
                            routeDibs[currentAction[1]][currentAction[2]] = this.id;
                        } else if (this.stepsSitting >= this.patience && currentAction[1] === 'boylstonUpSN' && currentAction[2] === 237) {
                            // if our patience is exhausted and we're not on boylston already, take a different route
                            const headPosition = this.segments[this.segments.length - 1];
                            if (headPosition !== 'boylstonUpSN') {
                                this.color = 'red'; // we're red because we had to change plans
                                this.stepsSitting = 0;
                                routeDibs[currentAction[1]][currentAction[2]] = null;
                                // scrap existing actions and add a new route
                                this.actions.splice(this.actionCursor, this.actions.length - this.actionCursor, ...goalsToActions([
                                    [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
                                    [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
                                    [ GOALS.WAIT, 20 ],
                                    [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
                                ]));
                            }
                        }
                        break;
                    default:
                }
            }
        } else {
            if (this.active) {
                // we're done... remove car from sim
                this.segments.forEach(([ stack, index ]) => {
                    routeStacks[stack][index] = null;
                });
                this.active = false;
                this.endStep = stepIndex;
                setCarsTally();
                tallyCongestion();
            }
        }
    }
}

// this holds car counts for all routes
let routeTallies = {};

const tallyCongestion = () => {
    routeTallies = {};

    Object.keys(cars).forEach(carId => {
        if (cars[carId].active) {
            const headPosition = cars[carId].segments.length ? cars[carId].segments[cars[carId].segments.length - 1] : null;
            if (headPosition) {
                const route = headPosition[0];
                if (!routeTallies[route]) routeTallies[route] = 0;
                routeTallies[route] += 1;
            }
        }
    });
    renderCongestion(routeTallies);
    return routeTallies;
};

// this populates the UI with car counts for each road
const renderCongestion = congestion => {
    congestionElement.innerText = `Adkins Rd.: ${(congestion.adkinsSN || 0) +
    (congestion.adkinsNS || 0)} 
Boylston Rd.: ${
    (congestion.boylstonWE || 0) +
    (congestion.boylstonEW || 0) +
    (congestion.boylstonUpSN || 0) +
    (congestion.boylstonUpNS || 0) +
    (congestion.boylstonToMacyGrove || 0)}
Bunker Hill Rd.: ${(congestion.bunkerHillWE || 0) +
    (congestion.bunkerHillEW || 0) +
    (congestion.bunkerHillWEParentDropoff || 0) +
    (congestion.bunkerHillEWParentDropoff || 0)}
Macy Grove Rd: ${(congestion.macyGroveNS || 0) + 
    (congestion.macyGroveSN || 0)}
Medical Parkway: ${(congestion.medicalParkwayEW || 0) + 
    (congestion.medicalParkwayWE || 0)}
Car Line: ${
    (congestion.carLine1 || 0) +
    (congestion.carLine2 || 0) +
    (congestion.carDropOffBoylstonDown || 0) +
    (congestion.carDropOffBoylstonUp || 0) +
    (congestion.carDropOffJoiner || 0)}
Bus Drop-off: ${
    (congestion.busDrop || 0)
}
`;
};

renderCongestion({});

// this populates the UI element with school traffic metrics
const setCarsTally = () => {
    let activeCars = 0;
    let clearedCars = 0;
    Object.keys(cars).forEach(carId => {
        if (cars[carId].active && cars[carId].type !== 'background' && cars[carId].type !== 'ems') activeCars += 1;
        if (cars[carId].endStep && cars[carId].type !== 'background' && cars[carId].type !== 'ems') clearedCars += 1;
    });
    carsElement.innerText = `School Traffic: ${NUM_CARS + NUM_FACULTY + NUM_BUSSES}, Active: ${activeCars}, Cleared: ${clearedCars}`;
};

// pythag distance between two points
const distance = (point1, point2) => {
    const dx = point2.x - point1.x;
    const dy = point2.y - point1.y;
    return Math.sqrt(dx * dx + dy * dy);
};

// gets distance in pixels for an entire route
const getRouteDistance = route => {
    let totalLength = 0;
    for (let i = 0; i < route.length - 1; i++) {
        const dx = route[i+1].x - route[i].x;
        const dy = route[i+1].y - route[i].y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        totalLength += distance;
    }
    return totalLength;
};

// constructs an object that stores all route lengths in pixels
const routeLengths = Object.keys(routes).reduce((allLengths, route) => ({
    ...allLengths,
    [ route ]: getRouteDistance( routes[route] ),
}), {});

// the routeStacks array is an array representation for all routes,
// storing the IDs of cars positioned on them
const routeStacks = Object.keys(routes).reduce((allLengths, route) => ({
    ...allLengths,
    [ route ]: new Array(Math.floor(routeLengths[route] )),
}), {});

// this object tracks who is waiting to go to specific spots
const routeDibs = Object.keys(routes).reduce((allLengths, route) => ({
    ...allLengths,
    [ route ]: new Array(Math.floor(routeLengths[route] )),
}), {});

// this method returns an array of actions based on a target car line and exit direction
const getCarLineActions = (lane, out) => {
    const carLineActions = [];

    for (let i = 0; i < routeStacks[`carLine${lane}`].length; i += 1) {
        carLineActions.push([ 'move', `carLine${lane}`, i ]);
    }
    
    const dropOffTime = carRNG.integer({
        min: secondsToSteps(CAR_DROPOFF_TIME_MIN),
        max: secondsToSteps(CAR_DROPOFF_TIME_MAX),
    });

    carLineActions.push(...[ ...new Array(dropOffTime)].map(d => ([ 'wait', 'carline' ])));
    
    for (let i = 0; i < routeStacks.carDropOffJoiner.length; i += 1) {
        carLineActions.push([ 'move', `carDropOffJoiner`, i ]);
    }

    if (out === 'south') {
        for (let i = 0; i < routeStacks.carDropOffBoylstonUp.length; i += 1) {
            carLineActions.push([ 'move', `carDropOffBoylstonUp`, i ]);
        }    
    } else {
        for (let i = 0; i < routeStacks.carDropOffBoylstonDown.length; i += 1) {
            carLineActions.push([ 'move', `carDropOffBoylstonDown`, i ]);
        }    
    }

    return carLineActions;
};

// this method adds a car to the sim
const addCar = car => {
    cars[car.id] = car;
};

// this is the RNG used for the sim
const carRNG = new Chance(RNG_SEED);

// this object stores references to stack positions of route intersections
const intersections = {
    medicalParkwayWE: {
        macyGroveSN: 1374,
        macyGroveNS: 273,
    },
    macyGroveNS: {
        bunkerHillWE: 1542,
    },
    boylstonEW: {
        bunkerHillWE: 2093,
        bunkerHillEW: 1333,
    },
    busDrop: {
        boylstonEW: 1596,
        boylstonWE: 410,
    },
    boylstonWE: {
        adkinsNS: 800,
        adkinsSN: 732,
    },
    carLine: {
        bunkerHillEW: 1448,
        bunkerHillWE: 1970,
        boylstonWE: 210,
        boylstonEW: 1786,
    },
    bunkerHillEW: {
        macyGroveSN: 1868,
    },
};

// this list of behaviors contains an array of goals that define the complete lifecycle of vehicles
// each vehicle is assigned a behavior, which is converted to actions
let behaviors = {
    'MACY_GROVE_TO_CARLINE_TO_MACY_GROVE': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 1934 ] ,
        [ GOALS.TRAVEL, 'bunkerHillWEParentDropoff', 0, routeStacks.bunkerHillWEParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, routeStacks.boylstonUpSN.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, intersections.bunkerHillEW.macyGroveSN ],
        [ GOALS.TRAVEL, 'macyGroveSN', 0, routeStacks.macyGroveSN.length - 1  ],
    ],
    'MACY_GROVE_TO_CARLINE_TO_WEST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 1934 ],
        [ GOALS.TRAVEL, 'bunkerHillWEParentDropoff', 0, routeStacks.bunkerHillWEParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, routeStacks.boylstonUpSN.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, routeStacks.bunkerHillEW.length - 1 ],
    ],
    'MACY_GROVE_TO_CARLINE_TO_EAST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 1934 ],
        [ GOALS.TRAVEL, 'bunkerHillWEParentDropoff', 0, routeStacks.bunkerHillWEParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, 390  ],
        [ GOALS.TRAVEL, 'boylstonToMacyGrove', 0, routeStacks.boylstonToMacyGrove.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.boylstonEW.bunkerHillWE, routeStacks.bunkerHillWE.length - 1 ],
    ],
    'MACY_GROVE_TO_CARLINE_TO_NORTH_ADKINS': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 1934 ],
        [ GOALS.TRAVEL, 'bunkerHillWEParentDropoff', 0, routeStacks.bunkerHillWEParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'south' ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ],
    'MACY_GROVE_TO_CARLINE_TO_SOUTH_ADKINS': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 1934 ],
        [ GOALS.TRAVEL, 'bunkerHillWEParentDropoff', 0, routeStacks.bunkerHillWEParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'south' ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ],
    'WEST_BUNKER_HILL_TO_CARLINE_TO_WEST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'bunkerHillWE', 0, 1934 ],
        [ GOALS.TRAVEL, 'bunkerHillWEParentDropoff', 0, routeStacks.bunkerHillWEParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, routeStacks.boylstonUpSN.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, routeStacks.bunkerHillEW.length - 1 ],
    ],    
    'WEST_BUNKER_HILL_TO_CARLINE_TO_NORTH_ADKINS': [
        [ GOALS.TRAVEL, 'bunkerHillWE', 0, 1934 ] ,
        [ GOALS.TRAVEL, 'bunkerHillWEParentDropoff', 0, routeStacks.bunkerHillWEParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'south' ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ],
    'WEST_BUNKER_HILL_TO_CARLINE_TO_SOUTH_ADKINS': [
        [ GOALS.TRAVEL, 'bunkerHillWE', 0, 1934 ] ,
        [ GOALS.TRAVEL, 'bunkerHillWEParentDropoff', 0, routeStacks.bunkerHillWEParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'south' ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ],
    'EAST_BUNKER_HILL_TO_CARLINE_TO_EAST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'bunkerHillEW', 0, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, 390  ],
        [ GOALS.TRAVEL, 'boylstonToMacyGrove', 0, routeStacks.boylstonToMacyGrove.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.boylstonEW.bunkerHillWE, routeStacks.bunkerHillWE.length - 1 ],
    ],
    'EAST_BUNKER_HILL_TO_CARLINE_TO_NORTH_ADKINS': [
        [ GOALS.TRAVEL, 'bunkerHillEW', 0, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'south' ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ],
    'EAST_BUNKER_HILL_TO_CARLINE_TO_SOUTH_ADKINS': [
        [ GOALS.TRAVEL, 'bunkerHillEW', 0, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'south' ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ], 
    'NORTH_ADKINS_TO_CARLINE_TO_WEST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'adkinsNS', 0, intersections.boylstonWE.adkinsNS ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, routeStacks.boylstonUpSN.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, routeStacks.bunkerHillEW.length - 1 ],
    ], 
    'NORTH_ADKINS_TO_CARLINE_TO_MACY_GROVE': [
        [ GOALS.TRAVEL, 'adkinsNS', 0, intersections.boylstonWE.adkinsNS ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, routeStacks.boylstonUpSN.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, intersections.bunkerHillEW.macyGroveSN ],
        [ GOALS.TRAVEL, 'macyGroveSN', 0, routeStacks.macyGroveSN.length - 1  ],
    ], 
    'NORTH_ADKINS_TO_CARLINE_TO_NORTH_ADKINS': [
        [ GOALS.TRAVEL, 'adkinsNS', 0, intersections.boylstonWE.adkinsNS ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'south' ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ], 
    'NORTH_ADKINS_TO_CARLINE_TO_EAST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'adkinsNS', 0, intersections.boylstonWE.adkinsNS ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, 390  ],
        [ GOALS.TRAVEL, 'boylstonToMacyGrove', 0, routeStacks.boylstonToMacyGrove.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.boylstonEW.bunkerHillWE, routeStacks.bunkerHillWE.length - 1 ],
    ], 
    'SOUTH_ADKINS_TO_CARLINE_TO_WEST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'adkinsSN', 0, intersections.boylstonWE.adkinsSN ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, routeStacks.boylstonUpSN.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonToMacyGrove', 0, routeStacks.boylstonToMacyGrove.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, routeStacks.bunkerHillEW.length - 1 ],
    ], 
    'SOUTH_ADKINS_TO_CARLINE_TO_EAST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'adkinsSN', 0, intersections.boylstonWE.adkinsSN ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, 390  ],
        [ GOALS.TRAVEL, 'boylstonToMacyGrove', 0, routeStacks.boylstonToMacyGrove.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.boylstonEW.bunkerHillWE, routeStacks.bunkerHillWE.length - 1 ],
    ], 
    'SOUTH_ADKINS_TO_CARLINE_TO_MACY_GROVE': [
        [ GOALS.TRAVEL, 'adkinsSN', 0, intersections.boylstonWE.adkinsSN ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'north' ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 237, routeStacks.boylstonUpSN.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, intersections.bunkerHillEW.macyGroveSN ],
        [ GOALS.TRAVEL, 'macyGroveSN', 0, routeStacks.macyGroveSN.length - 1  ],
    ], 
    'SOUTH_ADKINS_TO_CARLINE_TO_SOUTH_ADKINS': [
        [ GOALS.TRAVEL, 'adkinsSN', 0, intersections.boylstonWE.adkinsSN ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, 1377 ],
        [ GOALS.TRAVEL, 'bunkerHillEWParentDropoff', 0, routeStacks.bunkerHillEWParentDropoff.length - 1 ],
        [ GOALS.CAR_LINE, 'south' ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 214, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsNS', intersections.boylstonWE.adkinsNS, routeStacks.adkinsNS.length - 1 ],
    ], 
    'SOUTH_ADKINS_TO_BUSDROP_TO_SOUTH_ADKINS': [
        [ GOALS.TRAVEL, 'adkinsSN', 0, intersections.boylstonWE.adkinsSN ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'busDrop', 0, 280 ],
        [ GOALS.WAIT, secondsToSteps(carRNG.integer({
            min: BUS_DROPOFF_TIME_MIN,
            max: BUS_DROPOFF_TIME_MAX
        })), 'bus' ],
        [ GOALS.TRAVEL, 'busDrop', 280, routeStacks.busDrop.length - 1 ],
        [ GOALS.WAIT, 40 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsNS', intersections.boylstonWE.adkinsNS, routeStacks.adkinsNS.length - 1 ],
    ],
    'NORTH_ADKINS_TO_BUSDROP_TO_NORTH_ADKINS': [
        [ GOALS.TRAVEL, 'adkinsNS', 0, intersections.boylstonWE.adkinsNS ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'busDrop', 0, 280 ],
        [ GOALS.WAIT, secondsToSteps(carRNG.integer({
            min: BUS_DROPOFF_TIME_MIN,
            max: BUS_DROPOFF_TIME_MAX
        })), 'bus' ],
        [ GOALS.TRAVEL, 'busDrop', 280, routeStacks.busDrop.length - 1 ],
        [ GOALS.WAIT, 40 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ],
    'BACKGROUND_NORTH_ADKINS_TO_MACY_GROVE': [
        [ GOALS.TRAVEL, 'adkinsNS', 0, intersections.boylstonWE.adkinsNS ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, intersections.bunkerHillEW.macyGroveSN ],
        [ GOALS.TRAVEL, 'macyGroveSN', 0, routeStacks.macyGroveSN.length - 1  ],
    ],
    'BACKGROUND_SOUTH_ADKINS_TO_MACY_GROVE': [
        [ GOALS.TRAVEL, 'adkinsSN', 0, intersections.boylstonWE.adkinsSN ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonEW', 0, routeStacks.boylstonEW.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonUpSN', 0, routeStacks.boylstonUpSN.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillEW', intersections.boylstonEW.bunkerHillEW, intersections.bunkerHillEW.macyGroveSN ],
        [ GOALS.TRAVEL, 'macyGroveSN', 0, routeStacks.macyGroveSN.length - 1  ],
    ],
    'BACKGROUND_EAST_BUNKER_HILL_TO_MACY_GROVE': [
        [ GOALS.TRAVEL, 'bunkerHillEW', 0, 1868 ],
        [ GOALS.TRAVEL, 'macyGroveSN', 0, routeStacks.macyGroveSN.length - 1  ],
    ],
    'BACKGROUND_WEST_BUNKER_HILL_TO_MACY_GROVE': [
        [ GOALS.TRAVEL, 'bunkerHillWE', 0, 1542 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'macyGroveSN', 0, routeStacks.macyGroveSN.length - 1  ],
    ],
    'BACKGROUND_WEST_BUNKER_HILL_TO_EAST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'bunkerHillWE', 0, routeStacks.bunkerHillWE.length - 1 ],
    ],
    'BACKGROUND_EAST_BUNKER_HILL_TO_WEST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'bunkerHillEW', 0, routeStacks.bunkerHillEW.length - 1 ],
    ],
    'BACKGROUND_MACY_GROVE_TO_SOUTH_ADKINS': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 2082 ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 0, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsNS', intersections.boylstonWE.adkinsNS, routeStacks.adkinsNS.length - 1 ],
    ],
    'BACKGROUND_MACY_GROVE_TO_EAST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, routeStacks.bunkerHillWE.length - 1 ],
    ],
    'BACKGROUND_MACY_GROVE_TO_WEST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, routeStacks.bunkerHillWE.length - 1 ],
    ],
    'BACKGROUND_MACY_GROVE_TO_NORTH_ADKINS': [
        [ GOALS.TRAVEL, 'macyGroveNS', 0, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 2082 ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 0, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ],
    'BACKGROUND_HOSPITAL_TO_SOUTH_ADKINS': [
        [ GOALS.TRAVEL, 'medicalParkwayWE', 0, routeStacks.medicalParkwayWE.length - 1  ],
        [ GOALS.TRAVEL, 'macyGroveNS', 272, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 2082 ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 0, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsNS', intersections.boylstonWE.adkinsNS, routeStacks.adkinsNS.length - 1 ],
    ],
    'BACKGROUND_HOSPITAL_TO_EAST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'medicalParkwayWE', 0, routeStacks.medicalParkwayWE.length - 1  ],
        [ GOALS.TRAVEL, 'macyGroveNS', 272, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, routeStacks.bunkerHillWE.length - 1 ],
    ],
    'BACKGROUND_HOSPITAL_TO_WEST_BUNKER_HILL': [
        [ GOALS.TRAVEL, 'medicalParkwayWE', 0, routeStacks.medicalParkwayWE.length - 1  ],
        [ GOALS.TRAVEL, 'macyGroveNS', 272, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, routeStacks.bunkerHillWE.length - 1 ],
    ],
    'BACKGROUND_HOSPITAL_TO_NORTH_ADKINS': [
        [ GOALS.TRAVEL, 'medicalParkwayWE', 0, routeStacks.medicalParkwayWE.length - 1  ],
        [ GOALS.TRAVEL, 'macyGroveNS', 272, routeStacks.macyGroveNS.length - 1  ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'bunkerHillWE', intersections.macyGroveNS.bunkerHillWE, 2082 ],
        [ GOALS.TRAVEL, 'boylstonUpNS', 0, routeStacks.boylstonUpNS.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'boylstonWE', 0, routeStacks.boylstonWE.length - 1 ],
        [ GOALS.WAIT, 20 ],
        [ GOALS.TRAVEL, 'adkinsSN', intersections.boylstonWE.adkinsSN, routeStacks.adkinsSN.length - 1 ],
    ],
}

// generate a random number based on a weight function
function generateRandomNumber(weightFunction) {
    let random = carRNG.random();
    let weight = weightFunction(random);
    return weight;
}

// define the weight function
let weightFunction = function(number) {
    return Math.pow(number, 1.5); // more people show up as the start time draws near
};

// generate the random samples for vehicle start times
let startTimes = [];
for (let i = 0; i < NUM_CARS; i++) {
    let randomNumber = generateRandomNumber(weightFunction);
    startTimes.push(randomNumber);
}

// normalize the samples
let maxSample = Math.max(...startTimes);
if (MODE === 'dropoff') {
    startTimes = startTimes.map(sample => (secondsToSteps(70 * 60) - (Math.floor((sample / maxSample) * secondsToSteps(70 * 60)))));
} else {
    startTimes = startTimes.map(sample => secondsToSteps(60 * 60) - (Math.floor((sample / maxSample) * secondsToSteps(60 * 60))));
}

// create all parent vehicles used by the simulation
for (let i = 0; i < NUM_CARS; i += 1) {
    const chosenRoute = carRNG.pickone(Object.keys(behaviors).filter(val => val.indexOf('CARLINE') !== -1));
    addCar(new Car({
        color: carRNG.pickone([ 'tomato' ]),
        length: carRNG.integer({ min: 5, max: 5 }),
        goals: behaviors[chosenRoute],
        activationStep: startTimes.shift(),
        route: chosenRoute,
        type: 'student',
    }));
}

// generate random staff start times
let facultyStartTimes = [];
for (let i = 0; i < NUM_FACULTY; i++) {
    let randomNumber = generateRandomNumber(weightFunction);
    facultyStartTimes.push(randomNumber);
}

let maxFacultySample = Math.max(...facultyStartTimes);
facultyStartTimes = facultyStartTimes.map(sample => secondsToSteps(60 * 45) - (Math.floor((sample / maxFacultySample) * secondsToSteps(60 * 45))));

// create all staff vehicles used by the simulation
for (let i = 0; i < NUM_FACULTY; i += 1) {
    const chosenRoute = carRNG.pickone(Object.keys(behaviors).filter(val => val.indexOf('CARLINE') !== -1));
    addCar(new Car({
        color: carRNG.pickone([ 'purple' ]),
        length: carRNG.integer({ min: 5, max: 5 }),
        goals: behaviors[chosenRoute],
        activationStep: facultyStartTimes.shift(),
        route: chosenRoute,
        type: 'faculty',
    }));
}

// add an ambulance right when the drop-off starts
// life comes at you fast
if (MODE === 'dropoff') {
    const chosenRoute = carRNG.pickone(Object.keys(behaviors).filter(val => val.indexOf('BACKGROUND_HOSPITAL') === 0));
    addCar(new Car({
        color: 'red',
        length: 6,
        goals: behaviors[chosenRoute],
        activationStep: secondsToSteps(60 * 60),
        route: chosenRoute,
        type: 'ems',
    }));
}

// create all buses used by the simulation
for (let i = 0; i < NUM_BUSSES; i += 1) {
    const chosenRoute = carRNG.pickone(Object.keys(behaviors).filter(val => val.indexOf('BUSDROP') !== -1 || val.indexOf('EMS') !== -1));
    addCar(new Car({
        color: carRNG.pickone([ 'yellow' ]),
        length: 15,
        goals: behaviors[chosenRoute],
        activationStep: MODE === 'pickup' ? 0 : carRNG.integer({ min: secondsToSteps(60 * 60) - 600, max: secondsToSteps(60 * 60) + 600 }),
        route: chosenRoute,
        type: 'bus',
    }));
}

setCarsTally();


// helper function to calculate distance between two points
const calculateDistance = (point1, point2) => {
    const dx = point2.x - point1.x;
    const dy = point2.y - point1.y;
    return Math.sqrt(dx * dx + dy * dy);
};

// main function to find a point at a certain percentage along a path
const getPointOnPath = (points, percentage) => {
    // calculate total path length
    let totalLength = 0;
    for (let i = 0; i < points.length - 1; i++) {
        totalLength += distance(points[i], points[i+1]);
    }

    // calculate the distance along the path of the point we're looking for
    let targetDistance = totalLength * percentage;

    // find which segment this point would be on
    let accumulatedDistance = 0;
    for (let i = 0; i < points.length - 1; i++) {
        const segmentLength = calculateDistance(points[i], points[i+1]);
        if (accumulatedDistance + segmentLength >= targetDistance) {
            // the point is on this segment
            const segmentFraction = (targetDistance - accumulatedDistance) / segmentLength;
            return {
                x: points[i].x + segmentFraction * (points[i+1].x - points[i].x),
                y: points[i].y + segmentFraction * (points[i+1].y - points[i].y)
            };
        } else {
            // move on to the next segment
            accumulatedDistance += segmentLength;
        }
    }

    // if we've gone through all the points and haven't found the segment, return the last point
    return points[points.length - 1];
};


var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');
var image = new Image();
var imageWidth = 3628;
var imageHeight = 2521;
var points = []; // store clicked points


// Set canvas size
canvas.width = imageWidth;
canvas.height = imageHeight;

function drawFilledCircle(context, point, radius, color) {
    context.beginPath();
    context.arc(point.x, point.y, radius, 0, 2 * Math.PI, false);
    context.fillStyle = color;
    context.fill();
}

function triangleWave(x, amplitude, period) {
    const frequency = 1 / period;
    const currentCyclePosition = (x * frequency) % 1; // normalize the cycle position to between 0 and 1
    if (currentCyclePosition < 0.5) {
        return currentCyclePosition * 2 * amplitude; // rising part of the triangle wave
    } else {
        return (1 - currentCyclePosition) * 2 * amplitude; // falling part of the triangle wave
    }
}

image.onload = function () {
    render();
};

image.src = 'map-school.jpg';

/////////////////////////////////////////////////////////
// most of the stuff commented out below is use for debugging
/////////////////////////////////////////////////////////

// canvas.onclick = function (event) {
//     // Add clicked point to the list
//     var rect = canvas.getBoundingClientRect();
//     var x = event.clientX - rect.left;
//     var y = event.clientY - rect.top;
//     points.push({ x: x, y: y });
//     if (points.length >= 2) {
//         console.log(getRouteDistance(points));
//     }
// };

// let SHOWLOG = false;

// let routeIndex = 0;
// let routeCellCursor = 0;

window.onkeydown = function(event) {
    // if (event.key === 'z' || event.key === 'Z') {
    //     // Remove last point
    //     points.pop();

    //     // Redraw the lines
    // } else if (event.key === 'r' || event.key === 'R') {
    //     points = [];
    // }

    // else if (event.key === 'q' || event.key === 'Q') {
    //     tick = 0;
    // }

    // else if (event.key === 'c') {
    //     SHOWLOG = !SHOWLOG;
    //     console.log('showlog:', SHOWLOG);
    // }

    if (event.key === 'f') {
        FASTMODE = !FASTMODE;
        if (HB) clearInterval(HB);
        HB = setInterval(step, !FASTMODE ? simTimeRatio : 1);
    }
    // else if (event.key === ']') {
    //     routeIndex += 1;
    //     if (routeIndex > Object.keys(routes).length - 1) routeIndex = 0; // Object.keys(routes).length - 1;
    //     routeCellCursor = 0;
    // }

    // else if (event.key === '[') {
    //     routeIndex -= 1;
    //     if (routeIndex < 0) routeIndex = Object.keys(routes).length - 1;
    //     routeCellCursor = 0;
    // }
    
    // else if (event.key === '\'') {
    //     routeCellCursor += 1;
    //     if (routeCellCursor > routeStacks[Object.keys(routes)[ routeIndex ]].length - 1) routeCellCursor = 0; // Object.keys(routes).length - 1;
    // }

    // else if (event.key === ';') {
    //     routeCellCursor -= 1;
    //     if (routeCellCursor < 0) routeCellCursor = routeStacks[Object.keys(routes)[ routeIndex ]].length - 1;
    // }
    
    // else if (event.key === '/') {
    //     routeCellCursor += 50;
    //     if (routeCellCursor > routeStacks[Object.keys(routes)[ routeIndex ]].length - 1) routeCellCursor = 0; // Object.keys(routes).length - 1;
    // }

    // else if (event.key === '.') {
    //     routeCellCursor -= 50;
    //     if (routeCellCursor < 0) routeCellCursor = routeStacks[Object.keys(routes)[ routeIndex ]].length - 1;
    // }

    // if ([ '[', ']', '.', '/', ';', '\'' ].indexOf(event.key) !== -1) {
    //     console.log('Selected Route:', Object.keys(routes)[ routeIndex ], 'Cursor:', routeCellCursor);
    // }
};

// window.onkeyup = function(event) {
//     if (event.key === 'c') {
//         // SHOWLOG = false;
//     }
// };

let tick = 0;

// cache an array of points along each route keyed by a known percentage
const percPoints = {};

Object.keys(routes).forEach(route => {
    percPoints[route] = [];
    const stack = routeStacks[route];
    for (let i = 0; i < stack.length; i += 1) {
        const perc = i / routeLengths[route];
        percPoints[route].push(getPointOnPath(routes[route], perc));
    }
});

// calculate car color based on type and render tick
const carColor = (car, index) => {
    if (car.type !== 'ems') {
        return car.color;
    } else {
        if (Math.floor(simStep / 25) % 2) {
            return 'red';
        }
        return 'blue';
    }
};

// main function that renders the canvas
function render() {
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.drawImage(image, 0, 0, imageWidth, imageHeight);
    // context.beginPath();
    // for (var i = 0; i < points.length - 1; i++) {
    //     context.moveTo(points[i].x, points[i].y);
    //     context.lineTo(points[i + 1].x, points[i + 1].y);
    // }
    // context.stroke();

    tick += 1;

    Object.keys(routeStacks).forEach(route => {
        const stack = routeStacks[route];
        for (let i = stack.length; i >= 0; i -= 1) {
            if (stack[i]) {
                const point = percPoints[route][i];
                drawFilledCircle(context, point, 1.5, carColor(cars[stack[i]], i));
            }
            // const point = percPoints[route][i];
            // if (SHOWLOG && route !== 'budnkerHillEW' && point) {
            //     drawFilledCircle(context, point, 1, route === Object.keys(routes)[ routeIndex ] ? 'red' : 'white');

            //     if (route === Object.keys(routes)[ routeIndex ] && routeCellCursor === i) {
            //         drawFilledCircle(context, point, 3, 'red');
            //     }
            // }
        }
    });

    // const perc = triangleWave(tick * .001 * 0.3142857142857143, 1, 1); //Math.abs(Math.sin(tick * .01));
    // const point = getPointOnPath(routes.medicalParkwayWE, perc);
    // if (oldPoint) {
    //     //
    //     const dist = distance(oldPoint, point);
    //     const fps = (dist * P2F) * frameDuration;
    //     // console.log(dist, fps, fps / 1.467);
    // }
    // oldPoint = point;
    // drawFilledCircle(context, point, 8, 'red');

    requestAnimationFrame(render);
}

// method that iterates through all vehicles and runs their step function
const stepCars = () => {
    const activeCars = Object.keys(cars).filter(v => !cars[v].endStep);
    activeCars.forEach(carId => {
        const car = cars[carId];
        car.step(simStep);
    });
};

// returns a human-readable timestamp based on a start hour/minute and a number of seconds
function addSecondsToTime(seconds, hour, minute) {
    let date = new Date();
    date.setHours(hour, minute, 0, 0);  // set time to 6:00:00.000

    // Add the given seconds to the Date object
    date.setSeconds(date.getSeconds() + seconds);

    // Format and return the time
    let hours = date.getHours();
    let minutes = date.getMinutes();
    let secs = date.getSeconds();
    
    // Pad with zeroes if necessary
    hours = hours < 10 ? '0' + hours : hours;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    secs = secs < 10 ? '0' + secs : secs;

    return `${hours}:${minutes}:${secs}`;
}

// generate background traffic
let backgroundCars = 0;
let simStep = 0;

const BACKGROUND_CARS_PER_SECOND = BACKGROUND_CARS_PER_HOUR / 60 / 60;
const BACKGROUND_CARS_PER_STEP = BACKGROUND_CARS_PER_SECOND / simTimeRatio;
const BACKGROUND_CARS_EVERY_X_SECONDS = 1 / BACKGROUND_CARS_PER_SECOND;
const BACKGROUND_CARS_EVERY_X_STEPS = BACKGROUND_CARS_EVERY_X_SECONDS * simTimeRatio;
const BACKGROUND_CARS_STEP_LIKELIHOOD = BACKGROUND_CARS_PER_HOUR / BACKGROUND_CARS_EVERY_X_STEPS;

// primary step function for the sim
const step = () => {
    if (MODE === 'pickup') {
        timeElement.innerText = `${addSecondsToTime(simStep * simTimeRatio / 1000, 13, 30)} (${simStep})`;
    } else {
        timeElement.innerText = `${addSecondsToTime(simStep * simTimeRatio / 1000, 6, 0)} (${simStep})`;
    }

    if (carRNG.bool({ likelihood: BACKGROUND_CARS_STEP_LIKELIHOOD })) {
        backgroundCars += 1;
        
        const chosenRoute = carRNG.pickone(Object.keys(behaviors).filter(v => v.indexOf('BACKGROUND') === 0));
        const color = 'white';
        
        addCar(new Car({
            color,
            length: carRNG.integer({ min: 4, max: 6 }),
            goals: behaviors[chosenRoute],
            activationStep: simStep,
            route: chosenRoute,
            type: 'background',
        }));
    }


    Object.keys(routeStacks).forEach(route => {
        const stack = routeStacks[route];
        for (let i = stack.length; i >= 0; i -= 1) {
            const car = stack[i] ? cars[stack[i]] : null;
            const goal = car ? car.goals[0] : null;

            if (car && goal[0] === 2) {
                if (goal[2] === -1 || i < goal[2]) {
                    
                    let headsup = stack.slice(i, i + 8);
                    if (headsup && typeof headsup.find(val => val && val !== stack[i]) === 'undefined' && typeof stack[i + 1] === 'undefined') {   
                        // move up
                        stack[i + 1] = stack[i];
                        delete stack[i];
                    }
                    
                } else {
                    car.goals.shift();
                }
            } else if ( car && goal[0] === 1) {

            }
        }
    });
    stepCars();

    simStep += 1;
};

let HB = setInterval(step, simTiming);
